---
# tasks file for zfs-rescue

- name: Enable repos
  apt_repository:
    repo: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - deb http://deb.debian.org/debian "{{ osrelease }}" main contrib
    - deb-src http://deb.debian.org/debian "{{ osrelease }}" main contrib

- name: Install packages
  apt:
    pkg:
    - "debootstrap"
    - "gdisk"
    - "dkms"
    - "dpkg-dev"
    - "parted"

- name: Install zfs-dkms
  apt:
    name: "zfs-dkms"
    state: present
    install_recommends: no
    default_release: "{{ osreleasebp }}"

- name: Add the zfs module
  modprobe:
    name: zfs
    state: present

- name: Install zfsutils-linux
  apt:
    name: "zfsutils-linux"
    state: present
    default_release: "{{ osreleasebp }}"

# Example on how to read info and reuse it in subsequent task
- name: Read device information 
  parted: device=/dev/"{{ drive1 }}" unit=MiB
  register: drive1_info

- name: Read device information 
  parted: device=/dev/"{{ drive2 }}" unit=MiB
  register: drive2_info

- include_tasks: new_part.yml
#  when: format_zfs is undefined or format_zfs|bool == true

#- set_fact:
#    format_zfs: false
#    cacheable: yes

#- debug:
#    var: drive1_info

- name: System Installation
  shell: |
    zfs create -o canmount=off -o mountpoint=none rpool/ROOT
    zfs create -o canmount=off -o mountpoint=none bpool/BOOT
    zfs create -o canmount=noauto -o mountpoint=/ rpool/ROOT/debian
    zfs mount rpool/ROOT/debian

    zfs create -o mountpoint=/boot bpool/BOOT/debian
    zfs mount bpool/BOOT/debian
    zfs create                                 rpool/home
    zfs create -o mountpoint=/root             rpool/home/root
    zfs create -o canmount=off                 rpool/var
    zfs create -o canmount=off                 rpool/var/lib
    zfs create                                 rpool/var/log
    zfs create                                 rpool/var/spool
    zfs create -o com.sun:auto-snapshot=false  rpool/var/cache
    zfs create -o com.sun:auto-snapshot=false  rpool/var/tmp
    chmod 1777 /mnt/var/tmp
    zfs create -o com.sun:auto-snapshot=false  rpool/tmp
    chmod 1777 /mnt/tmp

    debootstrap {{ osrelease }} /mnt
    touch /tmp/system_installed

  args:
    executable: /bin/bash
    creates: /tmp/system_installed

- name: copy sources.list file
  template:
     src: templates/sources.list.j2
     dest: /mnt/etc/apt/sources.list
     owner: root
     group: root
     mode: '0644' # stat -c %a interfaces

- name: copy backports.list file
  template:
     src: templates/backports.list.j2
     dest: /mnt/etc/apt/sources.list.d/backports.list
     owner: root
     group: root
     mode: '0644' # stat -c %a interfaces

- name: copy zfs file
  template:
     src: files/90zfs
     dest: /mnt/etc/apt/preferences.d/90_zfs
     owner: root
     group: root
     mode: '0644' # stat -c %a interfaces

- name: copy zfs-import-bpool.service
  template:
     src: files/zfs-import-bpool.service
     dest: /mnt/etc/systemd/system/zfs-import-bpool.service
     owner: root
     group: root
     mode: '0644' # stat -c %a interfaces


- name: Mount and bind /dev, /sys, /proc
  mount:
    path: /mnt/{{ item }}
    fstab: /mnt/etc/fstab
    src: /{{ item }}
    opts: rbind
    state: mounted
    fstype: none
  loop:
    - dev
    - proc
    - sys

- name: enable en_US.UTF-8
  lineinfile:
    path: /mnt/etc/locale.gen
    line: en_US.UTF-8 UTF-8
    create: yes

- name: set timezone to Europe/Berlin
  lineinfile:
    path: /mnt/etc/timezone
    line: Europe/Berlin
    create: yes

# ugly hack to trick ansible to run commands within a chroot environment
- name: Chroot into new installation and install packages
  command: "chroot /mnt /bin/bash -c \"apt update; DEBIAN_FRONTEND=noninteractive apt -y install locales; dpkg-reconfigure -f noninteractive locales tzdata; DEBIAN_FRONTEND=noninteractive apt -y install dpkg-dev linux-headers-amd64 linux-image-amd64; DEBIAN_FRONTEND=noninteractive apt install --yes zfs-initramfs grub-pc openssh-server; dpkg --purge os-prober; exit\""

- name: Add GRUB_CMDLINE_LINUX
  lineinfile:
    path: /mnt/etc/default/grub
    regexp: "GRUB_CMDLINE_LINUX=\"\""
    line: "GRUB_CMDLINE_LINUX=\"root=ZFS=rpool/ROOT/debian\""

- name: copy zfs.conf
  template:
     src: files/zfs.conf
     dest: /mnt/etc/dkms/zfs.conf
     owner: root
     group: root
     mode: '0644' # stat -c %a interfaces

# ugly hack to trick ansible to run commands within a chroot environment
- name: chroot 2/4
  command: "chroot /mnt /bin/bash -c \"systemctl enable zfs-import-bpool sshd; update-initramfs -c -k all; update-grub\""
- name: chroot 3/4
  command: "chroot /mnt /bin/bash -c \"grub-install /dev/{{ drive1 }}; grub-install /dev/{{ drive2 }}; mkdir /etc/zfs/zfs-list.cache; touch /etc/zfs/zfs-list.cache/{bpool,rpool}; ln -sf /usr/lib/zfs-linux/zed.d/history_event-zfs-list-cacher.sh /etc/zfs/zed.d; \"" 
- name: chroot 4/4
  command: "chroot /mnt /bin/bash -c \"zed; sleep 3 && pkill -9 zed; sed -Ei 's|/mnt/?|/|' /etc/zfs/zfs-list.cache/*; passwd {{ root_password }} \""

- name: Unmount everything
  shell: |
    mount | grep -v zfs | tac | awk '/\/mnt/ {print $3}' | \
    xargs -i{} umount -lf {}
    zpool export -a
    reboot
